// This file is auto-generated by @hey-api/openapi-ts

export const $Activation = {
  type: "object",
  properties: {
    uid: {
      type: "string",
    },
    token: {
      type: "string",
    },
  },
  required: ["token", "uid"],
} as const;

export const $AliasNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    alias: {
      type: "string",
    },
  },
  required: ["alias", "children", "id", "type", "validation_errors"],
} as const;

export const $Database = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
    schema: {
      type: "object",
      additionalProperties: {
        type: "object",
        additionalProperties: {
          type: "object",
          properties: {
            type: {
              enum: [
                "smallint",
                "integer",
                "decimal",
                "numeric",
                "real",
                "float",
                "double-precision",
                "char",
                "varchar",
                "bit",
                "bit-varying",
                "date",
                "time",
                "timestamp",
                "null",
                "boolean",
              ],
              type: "string",
            },
            nullable: {
              type: "boolean",
            },
            primary_key: {
              type: "boolean",
            },
            references: {
              type: "object",
              properties: {
                table: {
                  type: "string",
                },
                column: {
                  type: "string",
                },
              },
              required: ["column", "table"],
              nullable: true,
            },
          },
          required: ["nullable", "primary_key", "references", "type"],
        },
      },
      readOnly: true,
    },
  },
  required: ["id", "name", "schema"],
} as const;

export const $DatabaseSummary = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
  },
  required: ["id", "name"],
} as const;

export const $ErrorPosition = {
  type: "object",
  properties: {
    line: {
      type: "integer",
    },
    start_col: {
      type: "integer",
    },
    end_col: {
      type: "integer",
    },
  },
  required: ["end_col", "line", "start_col"],
} as const;

export const $GroupByNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    keys: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["children", "id", "keys", "type", "validation_errors"],
} as const;

export const $HavingNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    condition: {
      type: "string",
    },
  },
  required: ["children", "condition", "id", "type", "validation_errors"],
} as const;

export const $JoinNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    method: {
      type: "string",
    },
    condition: {
      type: "string",
      nullable: true,
    },
    using: {
      type: "array",
      items: {
        type: "string",
      },
      nullable: true,
    },
  },
  required: ["children", "id", "method", "type", "validation_errors"],
} as const;

export const $LanguageEnum = {
  enum: ["sql", "ra"],
  type: "string",
  description: `* \`sql\` - SQL
* \`ra\` - Relational Algebra`,
} as const;

export const $Login = {
  type: "object",
  properties: {
    username: {
      type: "string",
    },
    password: {
      type: "string",
    },
  },
  required: ["password", "username"],
} as const;

export const $OrderByNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    keys: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["children", "id", "keys", "type", "validation_errors"],
} as const;

export const $PaginatedUserList = {
  type: "object",
  required: ["count", "results"],
  properties: {
    count: {
      type: "integer",
      example: 123,
    },
    next: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=400&limit=100",
    },
    previous: {
      type: "string",
      nullable: true,
      format: "uri",
      example: "http://api.example.org/accounts/?offset=200&limit=100",
    },
    results: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
    },
  },
} as const;

export const $PasswordResetConfirm = {
  type: "object",
  properties: {
    uid: {
      type: "string",
    },
    token: {
      type: "string",
    },
    new_password: {
      type: "string",
    },
  },
  required: ["new_password", "token", "uid"],
} as const;

export const $PatchedProject = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    database_id: {
      type: "integer",
      writeOnly: true,
    },
    database: {
      allOf: [
        {
          $ref: "#/components/schemas/DatabaseSummary",
        },
      ],
      readOnly: true,
    },
    queries: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuerySummary",
      },
      readOnly: true,
    },
    last_modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
  },
} as const;

export const $PatchedQuery = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
    sql_text: {
      type: "string",
    },
    ra_text: {
      type: "string",
    },
    language: {
      $ref: "#/components/schemas/LanguageEnum",
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
  },
} as const;

export const $PatchedUser = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
} as const;

export const $Project = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    database_id: {
      type: "integer",
      writeOnly: true,
    },
    database: {
      allOf: [
        {
          $ref: "#/components/schemas/DatabaseSummary",
        },
      ],
      readOnly: true,
    },
    queries: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QuerySummary",
      },
      readOnly: true,
    },
    last_modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
  },
  required: [
    "created",
    "database",
    "database_id",
    "id",
    "last_modified",
    "modified",
    "name",
    "queries",
  ],
} as const;

export const $Query = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
    sql_text: {
      type: "string",
    },
    ra_text: {
      type: "string",
    },
    language: {
      $ref: "#/components/schemas/LanguageEnum",
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
  },
  required: ["created", "id", "modified", "name", "validation_errors"],
} as const;

export const $QueryError = {
  type: "object",
  properties: {
    title: {
      type: "string",
    },
    description: {
      type: "string",
    },
    hint: {
      type: "string",
    },
    position: {
      $ref: "#/components/schemas/ErrorPosition",
    },
  },
  required: ["title"],
} as const;

export const $QueryExecution = {
  type: "object",
  properties: {
    results: {
      allOf: [
        {
          $ref: "#/components/schemas/QueryResultData",
        },
      ],
      description: "Query result data if the query execution was successful",
    },
    success: {
      type: "boolean",
      description: "Indicates if the query execution was successful",
    },
  },
  required: ["success"],
} as const;

export const $QueryResultData = {
  type: "object",
  properties: {
    columns: {
      type: "array",
      items: {
        type: "string",
      },
      description: "List of column names from the query",
    },
    rows: {
      type: "array",
      items: {
        type: "array",
        items: {
          type: "string",
          nullable: true,
        },
        description: "Values in a single row",
      },
      description: "List of query result rows",
    },
  },
  required: ["columns", "rows"],
} as const;

export const $QuerySummary = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    name: {
      type: "string",
      maxLength: 255,
    },
  },
  required: ["id", "name"],
} as const;

export const $QueryTree = {
  type: "object",
  properties: {
    sql_tree: {
      allOf: [
        {
          $ref: "#/components/schemas/SQLTree",
        },
      ],
      readOnly: true,
    },
    ra_tree: {
      $ref: "#/components/schemas/RATree",
    },
  },
  required: ["sql_tree"],
} as const;

export const $RATree = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    label: {
      type: "string",
    },
    sub_trees: {
      type: "array",
      items: {
        $ref: "#/components/schemas/RATree",
      },
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
  },
  required: ["id", "label", "sub_trees", "validation_errors"],
} as const;

export const $SQLTree = {
  oneOf: [
    {
      $ref: "#/components/schemas/TableNode",
    },
    {
      $ref: "#/components/schemas/AliasNode",
    },
    {
      $ref: "#/components/schemas/JoinNode",
    },
    {
      $ref: "#/components/schemas/SelectNode",
    },
    {
      $ref: "#/components/schemas/WhereNode",
    },
    {
      $ref: "#/components/schemas/GroupByNode",
    },
    {
      $ref: "#/components/schemas/HavingNode",
    },
    {
      $ref: "#/components/schemas/OrderByNode",
    },
    {
      $ref: "#/components/schemas/SetOpNode",
    },
  ],
} as const;

export const $SelectNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    columns: {
      type: "array",
      items: {
        type: "string",
      },
    },
  },
  required: ["children", "columns", "id", "type", "validation_errors"],
} as const;

export const $SendEmailReset = {
  type: "object",
  properties: {
    email: {
      type: "string",
      format: "email",
    },
  },
  required: ["email"],
} as const;

export const $SetOpNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    operator: {
      type: "string",
    },
  },
  required: ["children", "id", "operator", "type", "validation_errors"],
} as const;

export const $SetPassword = {
  type: "object",
  properties: {
    new_password: {
      type: "string",
    },
    current_password: {
      type: "string",
    },
  },
  required: ["current_password", "new_password"],
} as const;

export const $SetUsername = {
  type: "object",
  properties: {
    current_password: {
      type: "string",
    },
    new_email: {
      type: "string",
      format: "email",
      title: "Email",
      maxLength: 255,
    },
  },
  required: ["current_password", "new_email"],
} as const;

export const $TableNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    name: {
      type: "string",
    },
  },
  required: ["children", "id", "name", "type", "validation_errors"],
} as const;

export const $TypeEnum = {
  enum: [
    "Table",
    "Alias",
    "Join",
    "Select",
    "Where",
    "GroupBy",
    "Having",
    "OrderBy",
    "SetOp",
  ],
  type: "string",
  description: `* \`Table\` - Table
* \`Alias\` - Alias
* \`Join\` - Join
* \`Select\` - Select
* \`Where\` - Where
* \`GroupBy\` - GroupBy
* \`Having\` - Having
* \`OrderBy\` - OrderBy
* \`SetOp\` - SetOp`,
} as const;

export const $User = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      readOnly: true,
    },
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    created: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
    modified: {
      type: "string",
      format: "date-time",
      readOnly: true,
    },
  },
  required: ["created", "email", "id", "modified"],
} as const;

export const $UserCreate = {
  type: "object",
  properties: {
    email: {
      type: "string",
      format: "email",
      maxLength: 255,
    },
    id: {
      type: "integer",
      readOnly: true,
    },
    password: {
      type: "string",
      writeOnly: true,
    },
  },
  required: ["email", "id", "password"],
} as const;

export const $UsernameResetConfirm = {
  type: "object",
  properties: {
    new_email: {
      type: "string",
      format: "email",
      title: "Email",
      maxLength: 255,
    },
  },
  required: ["new_email"],
} as const;

export const $WhereNode = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/SQLTree",
      },
      readOnly: true,
    },
    type: {
      allOf: [
        {
          $ref: "#/components/schemas/TypeEnum",
        },
      ],
      readOnly: true,
    },
    validation_errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/QueryError",
      },
    },
    condition: {
      type: "string",
    },
  },
  required: ["children", "condition", "id", "type", "validation_errors"],
} as const;
