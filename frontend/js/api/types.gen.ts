// This file is auto-generated by @hey-api/openapi-ts

export type Activation = {
  uid: string;
  token: string;
};

export type AliasNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  alias: string;
};

export type Attempt = {
  readonly id: number;
  text?: string;
  readonly validation_errors: Array<QueryError>;
  completed?: boolean;
  readonly language: LanguageEnum;
};

/**
 * * `user` - User
 * * `assistant` - Assistant
 */
export type AuthorEnum = "user" | "assistant";

export type Database = {
  readonly id: number;
  name: string;
  description: string;
  readonly schema: {
    [key: string]: {
      [key: string]: {
        type:
          | "smallint"
          | "integer"
          | "decimal"
          | "numeric"
          | "real"
          | "float"
          | "double-precision"
          | "char"
          | "varchar"
          | "bit"
          | "bit-varying"
          | "date"
          | "time"
          | "timestamp"
          | "null"
          | "boolean";
        nullable: boolean;
        primary_key: boolean;
        references: {
          table: string;
          column: string;
        } | null;
      };
    };
  };
};

export type DatabaseSummary = {
  readonly id: number;
  name: string;
  description: string;
};

/**
 * * `easy` - Easy
 * * `medium` - Medium
 * * `hard` - Hard
 */
export type DifficultyEnum = "easy" | "medium" | "hard";

export type DivisionNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
};

export type ErrorPosition = {
  line: number;
  start_col: number;
  end_col: number;
};

export type Exercise = {
  readonly id: number;
  language: LanguageEnum;
  title: string;
  difficulty: DifficultyEnum;
  description: string;
  solution: string;
  readonly database: DatabaseSummary;
  readonly completed: boolean;
  readonly attempt: Attempt;
  readonly solution_data: QueryResultData;
};

export type ExerciseSummary = {
  readonly id: number;
  title: string;
  difficulty: DifficultyEnum;
  language: LanguageEnum;
  readonly database: DatabaseSummary;
  readonly completed: boolean;
};

export type Feedback = {
  correct: boolean;
  results?: QueryResultData;
};

export type GroupByNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  keys: Array<string>;
};

export type GroupedAggregationNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  group_by: Array<string>;
  aggregations: Array<Array<string>>;
};

export type HavingNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  condition: string;
};

/**
 * * `sql` - SQL
 * * `ra` - Relational Algebra
 */
export type LanguageEnum = "sql" | "ra";

export type Login = {
  username: string;
  password: string;
};

export type Message = {
  readonly id: number;
  readonly author: AuthorEnum;
  content: string;
  readonly created: string;
};

export type OrderByNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  keys: Array<string>;
};

export type PaginatedUserList = {
  count: number;
  next?: string | null;
  previous?: string | null;
  results: Array<User>;
};

export type PasswordResetConfirm = {
  uid: string;
  token: string;
  new_password: string;
};

export type PatchedAttempt = {
  readonly id?: number;
  text?: string;
  readonly validation_errors?: Array<QueryError>;
  completed?: boolean;
  readonly language?: LanguageEnum;
};

export type PatchedProject = {
  readonly id?: number;
  database_id?: number;
  readonly database?: DatabaseSummary;
  readonly queries?: Array<QuerySummary>;
  readonly last_modified?: string;
  readonly created?: string;
  readonly modified?: string;
  name?: string;
};

export type PatchedQuery = {
  readonly id?: number;
  name?: string;
  text?: string;
  language?: LanguageEnum;
  readonly created?: string;
  readonly modified?: string;
  readonly validation_errors?: Array<QueryError>;
  readonly assistant_messages?: Array<Message>;
};

export type PatchedUser = {
  readonly id?: number;
  email?: string;
  readonly created?: string;
  readonly modified?: string;
};

export type Project = {
  readonly id: number;
  database_id: number;
  readonly database: DatabaseSummary;
  readonly queries: Array<QuerySummary>;
  readonly last_modified: string;
  readonly created: string;
  readonly modified: string;
  name: string;
};

export type ProjectionNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  attributes: Array<string>;
};

export type Query = {
  readonly id: number;
  name: string;
  text?: string;
  language: LanguageEnum;
  readonly created: string;
  readonly modified: string;
  readonly validation_errors: Array<QueryError>;
  readonly assistant_messages: Array<Message>;
};

export type QueryError = {
  title: string;
  description?: string;
  hint?: string;
  position?: ErrorPosition;
};

export type QueryExecution = {
  /**
   * Query result data if the query execution was successful
   */
  results?: QueryResultData;
  /**
   * Indicates if the query execution was successful
   */
  success: boolean;
};

export type QueryResultData = {
  /**
   * List of column names from the query
   */
  columns: Array<string>;
  /**
   * List of query result rows
   */
  rows: Array<Array<string | null>>;
};

export type QuerySummary = {
  readonly id: number;
  name: string;
  language: LanguageEnum;
};

export type QueryTree = {
  readonly sql_tree: SQLTree;
  readonly ra_tree: RATree;
};

export type RAJoinNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  operator: string;
};

export type RATree =
  | RelationNode
  | ProjectionNode
  | SelectionNode
  | RenameNode
  | DivisionNode
  | SetOperationNode
  | RAJoinNode
  | ThetaJoinNode
  | GroupedAggregationNode
  | TopNNode;

/**
 * * `Relation` - Relation
 * * `Projection` - Projection
 * * `Selection` - Selection
 * * `Rename` - Rename
 * * `Division` - Division
 * * `SetOperation` - SetOperation
 * * `Join` - Join
 * * `ThetaJoin` - ThetaJoin
 * * `GroupedAggregation` - GroupedAggregation
 * * `TopN` - TopN
 */
export type RaNodeTypeEnum =
  | "Relation"
  | "Projection"
  | "Selection"
  | "Rename"
  | "Division"
  | "SetOperation"
  | "Join"
  | "ThetaJoin"
  | "GroupedAggregation"
  | "TopN";

export type RelationNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  name: string;
};

export type RenameNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  alias: string;
};

export type SQLJoinNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  method: string;
  condition?: string | null;
  using?: Array<string> | null;
};

export type SQLTree =
  | TableNode
  | AliasNode
  | SQLJoinNode
  | SelectNode
  | WhereNode
  | GroupByNode
  | HavingNode
  | OrderByNode
  | SetOpNode;

export type SelectNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  columns: Array<string>;
};

export type SelectionNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  condition: string;
};

export type SendEmailReset = {
  email: string;
};

export type SetOpNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  operator: string;
};

export type SetOperationNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  operator: string;
};

export type SetPassword = {
  new_password: string;
  current_password: string;
};

export type SetUsername = {
  current_password: string;
  new_email: string;
};

/**
 * * `Table` - Table
 * * `Alias` - Alias
 * * `Join` - Join
 * * `Select` - Select
 * * `Where` - Where
 * * `GroupBy` - GroupBy
 * * `Having` - Having
 * * `OrderBy` - OrderBy
 * * `SetOp` - SetOp
 */
export type SqlNodeTypeEnum =
  | "Table"
  | "Alias"
  | "Join"
  | "Select"
  | "Where"
  | "GroupBy"
  | "Having"
  | "OrderBy"
  | "SetOp";

export type TableNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  name: string;
};

export type ThetaJoinNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  condition: string;
};

export type TopNNode = {
  id: number;
  readonly children: Array<RATree>;
  readonly ra_node_type: RaNodeTypeEnum;
  validation_errors: Array<QueryError>;
  limit: number;
  attribute: string;
};

export type User = {
  readonly id: number;
  email: string;
  readonly created: string;
  readonly modified: string;
};

export type UserCreate = {
  email: string;
  readonly id: number;
  password: string;
};

export type UsernameResetConfirm = {
  new_email: string;
};

export type WhereNode = {
  id: number;
  readonly children: Array<SQLTree>;
  readonly sql_node_type: SqlNodeTypeEnum;
  validation_errors: Array<QueryError>;
  condition: string;
};

export type AttemptsUpdateData = {
  /**
   * A unique integer value identifying this attempt.
   */
  id: number;
  requestBody?: Attempt;
};

export type AttemptsUpdateResponse = Attempt;

export type AttemptsPartialUpdateData = {
  /**
   * A unique integer value identifying this attempt.
   */
  id: number;
  requestBody?: PatchedAttempt;
};

export type AttemptsPartialUpdateResponse = Attempt;

export type AttemptsSubmitCreateData = {
  /**
   * A unique integer value identifying this attempt.
   */
  id: number;
};

export type AttemptsSubmitCreateResponse = Feedback;

export type AttemptsSubqueriesExecutionsCreateData = {
  /**
   * A unique integer value identifying this attempt.
   */
  id: number;
  subqueryId: number;
};

export type AttemptsSubqueriesExecutionsCreateResponse = QueryExecution;

export type AttemptsTreeRetrieveData = {
  /**
   * A unique integer value identifying this attempt.
   */
  id: number;
};

export type AttemptsTreeRetrieveResponse = QueryTree;

export type AuthLoginCreateData = {
  requestBody: Login;
};

export type AuthLoginCreateResponse = Login;

export type AuthLogoutCreateResponse = unknown;

export type AuthUsersListData = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type AuthUsersListResponse = PaginatedUserList;

export type AuthUsersCreateData = {
  requestBody: UserCreate;
};

export type AuthUsersCreateResponse = UserCreate;

export type AuthUsersRetrieveData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
};

export type AuthUsersRetrieveResponse = User;

export type AuthUsersUpdateData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody: User;
};

export type AuthUsersUpdateResponse = User;

export type AuthUsersPartialUpdateData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody?: PatchedUser;
};

export type AuthUsersPartialUpdateResponse = User;

export type AuthUsersDestroyData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
};

export type AuthUsersDestroyResponse = void;

export type AuthUsersActivationCreateData = {
  requestBody: Activation;
};

export type AuthUsersActivationCreateResponse = Activation;

export type AuthUsersMeRetrieveResponse = User;

export type AuthUsersMeUpdateData = {
  requestBody: User;
};

export type AuthUsersMeUpdateResponse = User;

export type AuthUsersMePartialUpdateData = {
  requestBody?: PatchedUser;
};

export type AuthUsersMePartialUpdateResponse = User;

export type AuthUsersMeDestroyResponse = void;

export type AuthUsersResendActivationCreateData = {
  requestBody: SendEmailReset;
};

export type AuthUsersResendActivationCreateResponse = SendEmailReset;

export type AuthUsersResetEmailCreateData = {
  requestBody: SendEmailReset;
};

export type AuthUsersResetEmailCreateResponse = SendEmailReset;

export type AuthUsersResetEmailConfirmCreateData = {
  requestBody: UsernameResetConfirm;
};

export type AuthUsersResetEmailConfirmCreateResponse = UsernameResetConfirm;

export type AuthUsersResetPasswordCreateData = {
  requestBody: SendEmailReset;
};

export type AuthUsersResetPasswordCreateResponse = SendEmailReset;

export type AuthUsersResetPasswordConfirmCreateData = {
  requestBody: PasswordResetConfirm;
};

export type AuthUsersResetPasswordConfirmCreateResponse = PasswordResetConfirm;

export type AuthUsersSetEmailCreateData = {
  requestBody: SetUsername;
};

export type AuthUsersSetEmailCreateResponse = SetUsername;

export type AuthUsersSetPasswordCreateData = {
  requestBody: SetPassword;
};

export type AuthUsersSetPasswordCreateResponse = SetPassword;

export type DatabasesListResponse = Array<DatabaseSummary>;

export type DatabasesRetrieveData = {
  /**
   * A unique integer value identifying this database.
   */
  id: number;
};

export type DatabasesRetrieveResponse = Database;

export type ExercisesListResponse = Array<ExerciseSummary>;

export type ExercisesRetrieveData = {
  /**
   * A unique integer value identifying this exercise.
   */
  id: number;
};

export type ExercisesRetrieveResponse = Exercise;

export type ProjectsListResponse = Array<Project>;

export type ProjectsCreateData = {
  requestBody: Project;
};

export type ProjectsCreateResponse = Project;

export type ProjectsRetrieveData = {
  /**
   * A unique integer value identifying this project.
   */
  id: number;
};

export type ProjectsRetrieveResponse = Project;

export type ProjectsUpdateData = {
  /**
   * A unique integer value identifying this project.
   */
  id: number;
  requestBody: Project;
};

export type ProjectsUpdateResponse = Project;

export type ProjectsPartialUpdateData = {
  /**
   * A unique integer value identifying this project.
   */
  id: number;
  requestBody?: PatchedProject;
};

export type ProjectsPartialUpdateResponse = Project;

export type ProjectsDestroyData = {
  /**
   * A unique integer value identifying this project.
   */
  id: number;
};

export type ProjectsDestroyResponse = void;

export type ProjectsQueriesCreateData = {
  /**
   * ID of the parent project
   */
  projectPk: number;
  requestBody: Query;
};

export type ProjectsQueriesCreateResponse = Query;

export type QueriesRetrieveData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
};

export type QueriesRetrieveResponse = Query;

export type QueriesUpdateData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
  requestBody: Query;
};

export type QueriesUpdateResponse = Query;

export type QueriesPartialUpdateData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
  requestBody?: PatchedQuery;
};

export type QueriesPartialUpdateResponse = Query;

export type QueriesDestroyData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
};

export type QueriesDestroyResponse = void;

export type QueriesExecutionsCreateData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
};

export type QueriesExecutionsCreateResponse = QueryExecution;

export type QueriesMessagesCreateData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
  requestBody: Message;
};

export type QueriesMessagesCreateResponse = Message;

export type QueriesSubqueriesExecutionsCreateData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
  subqueryId: number;
};

export type QueriesSubqueriesExecutionsCreateResponse = QueryExecution;

export type QueriesTranspileCreateData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
};

export type QueriesTranspileCreateResponse = Query;

export type QueriesTreeRetrieveData = {
  /**
   * A unique integer value identifying this query.
   */
  id: number;
};

export type QueriesTreeRetrieveResponse = QueryTree;

export type $OpenApiTs = {
  "/api/attempts/{id}/": {
    put: {
      req: AttemptsUpdateData;
      res: {
        200: Attempt;
      };
    };
    patch: {
      req: AttemptsPartialUpdateData;
      res: {
        200: Attempt;
      };
    };
  };
  "/api/attempts/{id}/submit/": {
    post: {
      req: AttemptsSubmitCreateData;
      res: {
        200: Feedback;
      };
    };
  };
  "/api/attempts/{id}/subqueries/{subquery_id}/executions/": {
    post: {
      req: AttemptsSubqueriesExecutionsCreateData;
      res: {
        200: QueryExecution;
      };
    };
  };
  "/api/attempts/{id}/tree/": {
    get: {
      req: AttemptsTreeRetrieveData;
      res: {
        200: QueryTree;
      };
    };
  };
  "/api/auth/login/": {
    post: {
      req: AuthLoginCreateData;
      res: {
        200: Login;
      };
    };
  };
  "/api/auth/logout/": {
    post: {
      res: {
        /**
         * No response body
         */
        200: unknown;
      };
    };
  };
  "/api/auth/users/": {
    get: {
      req: AuthUsersListData;
      res: {
        200: PaginatedUserList;
      };
    };
    post: {
      req: AuthUsersCreateData;
      res: {
        201: UserCreate;
      };
    };
  };
  "/api/auth/users/{id}/": {
    get: {
      req: AuthUsersRetrieveData;
      res: {
        200: User;
      };
    };
    put: {
      req: AuthUsersUpdateData;
      res: {
        200: User;
      };
    };
    patch: {
      req: AuthUsersPartialUpdateData;
      res: {
        200: User;
      };
    };
    delete: {
      req: AuthUsersDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/auth/users/activation/": {
    post: {
      req: AuthUsersActivationCreateData;
      res: {
        200: Activation;
      };
    };
  };
  "/api/auth/users/me/": {
    get: {
      res: {
        200: User;
      };
    };
    put: {
      req: AuthUsersMeUpdateData;
      res: {
        200: User;
      };
    };
    patch: {
      req: AuthUsersMePartialUpdateData;
      res: {
        200: User;
      };
    };
    delete: {
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/auth/users/resend_activation/": {
    post: {
      req: AuthUsersResendActivationCreateData;
      res: {
        200: SendEmailReset;
      };
    };
  };
  "/api/auth/users/reset_email/": {
    post: {
      req: AuthUsersResetEmailCreateData;
      res: {
        200: SendEmailReset;
      };
    };
  };
  "/api/auth/users/reset_email_confirm/": {
    post: {
      req: AuthUsersResetEmailConfirmCreateData;
      res: {
        200: UsernameResetConfirm;
      };
    };
  };
  "/api/auth/users/reset_password/": {
    post: {
      req: AuthUsersResetPasswordCreateData;
      res: {
        200: SendEmailReset;
      };
    };
  };
  "/api/auth/users/reset_password_confirm/": {
    post: {
      req: AuthUsersResetPasswordConfirmCreateData;
      res: {
        200: PasswordResetConfirm;
      };
    };
  };
  "/api/auth/users/set_email/": {
    post: {
      req: AuthUsersSetEmailCreateData;
      res: {
        200: SetUsername;
      };
    };
  };
  "/api/auth/users/set_password/": {
    post: {
      req: AuthUsersSetPasswordCreateData;
      res: {
        200: SetPassword;
      };
    };
  };
  "/api/databases/": {
    get: {
      res: {
        200: Array<DatabaseSummary>;
      };
    };
  };
  "/api/databases/{id}/": {
    get: {
      req: DatabasesRetrieveData;
      res: {
        200: Database;
      };
    };
  };
  "/api/exercises/": {
    get: {
      res: {
        200: Array<ExerciseSummary>;
      };
    };
  };
  "/api/exercises/{id}/": {
    get: {
      req: ExercisesRetrieveData;
      res: {
        200: Exercise;
      };
    };
  };
  "/api/projects/": {
    get: {
      res: {
        200: Array<Project>;
      };
    };
    post: {
      req: ProjectsCreateData;
      res: {
        201: Project;
      };
    };
  };
  "/api/projects/{id}/": {
    get: {
      req: ProjectsRetrieveData;
      res: {
        200: Project;
      };
    };
    put: {
      req: ProjectsUpdateData;
      res: {
        200: Project;
      };
    };
    patch: {
      req: ProjectsPartialUpdateData;
      res: {
        200: Project;
      };
    };
    delete: {
      req: ProjectsDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/projects/{project_pk}/queries/": {
    post: {
      req: ProjectsQueriesCreateData;
      res: {
        201: Query;
      };
    };
  };
  "/api/queries/{id}/": {
    get: {
      req: QueriesRetrieveData;
      res: {
        200: Query;
      };
    };
    put: {
      req: QueriesUpdateData;
      res: {
        200: Query;
      };
    };
    patch: {
      req: QueriesPartialUpdateData;
      res: {
        200: Query;
      };
    };
    delete: {
      req: QueriesDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/queries/{id}/executions/": {
    post: {
      req: QueriesExecutionsCreateData;
      res: {
        200: QueryExecution;
      };
    };
  };
  "/api/queries/{id}/messages/": {
    post: {
      req: QueriesMessagesCreateData;
      res: {
        200: Message;
      };
    };
  };
  "/api/queries/{id}/subqueries/{subquery_id}/executions/": {
    post: {
      req: QueriesSubqueriesExecutionsCreateData;
      res: {
        200: QueryExecution;
      };
    };
  };
  "/api/queries/{id}/transpile/": {
    post: {
      req: QueriesTranspileCreateData;
      res: {
        200: Query;
      };
    };
  };
  "/api/queries/{id}/tree/": {
    get: {
      req: QueriesTreeRetrieveData;
      res: {
        200: QueryTree;
      };
    };
  };
};
