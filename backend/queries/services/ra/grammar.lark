?expr: set_expr

?set_expr: join_expr
         | set_expr _UNION join_expr     -> union
         | set_expr _DIFF join_expr      -> difference
         | set_expr _INTERSECT join_expr -> intersection
         | set_expr _CARTESIAN join_expr -> cartesian

?join_expr: unary_expr
          | join_expr _NATURAL_JOIN unary_expr    -> natural_join
          | join_expr _theta_join_op unary_expr   -> theta_join
          | join_expr _SEMIJOIN unary_expr        -> semi_join
          | join_expr _DIV unary_expr             -> division

?unary_expr: projection
           | selection
           | grouped_aggregation
           | topn
           | sub_expr

?sub_expr: relation
         | "(" expr ")"

projection: _PI _subscript{list{attribute}} expr

selection: _SIGMA _subscript{bool_expr} expr

?bool_expr: and_expr
          | bool_expr "\\lor" and_expr -> or_

?and_expr: bool_atom
         | and_expr "\\land" bool_atom -> and_

?bool_atom: "\\lnot" bool_atom -> not_
          | "(" bool_expr ")"
          | comparison

comparison: value comparator value
comparator: "=" -> eq
          | "\\neq" -> neq
          | lt
          | "\\leq" -> leq
          | gt
          | "\\geq" -> geq

?value: NUMBER -> number
      | ESCAPED_STRING -> string
      | attribute

grouped_aggregation: _GAMMA _subscript{_grouped_aggregation_params} expr
_grouped_aggregation_params: "(" _grouping_attrs "," _aggregations ")"
_grouping_attrs: "(" list{attribute} ")"
_aggregations: "(" list{aggregation} ")"
aggregation: "(" attribute "," aggregation_function "," attribute ")"
aggregation_function: "count" -> count
                    | "sum" -> sum
                    | "avg" -> avg
                    | "min" -> min
                    | "max" -> max

topn: _TOPN _subscript{_topn_params} expr
_topn_params: "(" NUMBER "," attribute ")"

_theta_join_op: _overset{bool_expr, "\\bowtie"}

relation: IDENTIFIER
attribute: (relation ".")? IDENTIFIER

_PI: "\\pi"
_SIGMA: "\\sigma"
_GAMMA: "\\Gamma"
_TOPN: "T"
_UNION: "\\cup"
_DIFF: "-"
_INTERSECT: "\\cap"
_CARTESIAN: "\\times"
_NATURAL_JOIN: "\\Join"
_SEMIJOIN: "\\ltimes"
_DIV: "\\div"
lt: "<" | "\\lt"
gt: ">" | "\\gt"

list{item}: item ("," item)* -> item_list
_subscript{content}: "_" "{" content "}"
_overset{superscript, operator}: "\\overset" "{" superscript "}" "{" operator "}"

IDENTIFIER: /[a-zA-Z](\\_|[a-zA-Z0-9])*/

%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS_INLINE
%ignore WS_INLINE