name: main
on: [push, pull_request]

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build:
    name: Build ra_sql_visualisation
    strategy:
      matrix:
        python: [3.12]
        node: [20.13]
    env:
      DATABASE_URL: "sqlite:///"
      REDIS_URL: "redis://"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Store branch and latest SHA
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        id: git
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Cache node modules
        uses: actions/cache@v4
        env:
          cache_name: node-modules-cache
        with:
          path: ~/.npm
          key: build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
          restore-keys: |
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}
            build-${{ env.cache_name }}
      - name: Cache pip
        uses: actions/cache@v4
        env:
          cache_name: pip-cache
        with:
          path: ~/.cache/pip
          key: build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
          restore-keys: |
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}-${{ steps.git.outputs.sha_short }}
            build-${{ env.cache_name }}-${{ steps.git.outputs.branch }}
            build-${{ env.cache_name }}
      - run: python -m pip install --upgrade pip
      - run: python -m pip install poetry==2.0.1
      - run: curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
      - run: sudo apt-get install git-lfs --upgrade
      - run: poetry install --with dev --no-root --no-interaction --no-ansi
      - run: npm install
      - run: npm run build
      - run: npm run lint
      - name: Generate secret key
        run: echo '::set-output name=SECRET_KEY::`python -c "import uuid; print(uuid.uuid4().hex + uuid.uuid4().hex)"`'
        id: secret_id_generator
      - name: Linting
        run: poetry run ruff check ./backend/
        env:
          DJANGO_SETTINGS_MODULE: "ra_sql_visualisation.settings.local_base"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
      - run: poetry run pre-commit run --all-files
        env:
          SKIP: ruff,eslint,missing-migrations,backend-schema
      - run: poetry run python manage.py makemigrations --check --dry-run
        env:
          DJANGO_SETTINGS_MODULE: "ra_sql_visualisation.settings.production"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
        working-directory: backend
      - run: poetry run python manage.py check --deploy
        env:
          DJANGO_SETTINGS_MODULE: "ra_sql_visualisation.settings.production"
          SECRET_KEY: ${{ steps.secret_id_generator.outputs.SECRET_KEY }}
          DATABASE_URL: "sqlite:///"
          ALLOWED_HOSTS: ".example.org"
          SENDGRID_USERNAME: "test"
          SENDGRID_PASSWORD: "test"
          REDIS_URL: "redis://"
        working-directory: backend
      - run: |
          poetry run coverage run -m pytest --junitxml=junit/test-results.xml
          poetry run coverage xml -i
        working-directory: backend
      - name: Publish Pytest Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: backend/junit/test-results.xml
      - run: npm run test
  deploy:
    name: Deploy to VM
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd /home/ubuntu/ra-sql-visualisation
            make docker_down
            make docker_migrate
            make docker_up